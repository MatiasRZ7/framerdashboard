"use client";

import { useEffect } from "react";
import { useLearningFeedback } from "@/hooks/useLearningFeedback";

export default function LearningFeedbackDemo() {
  const { logLearning, getStats, checkSimilarLearning } = useLearningFeedback();

  useEffect(() => {
    // Verificar si ya registramos este aprendizaje
    const existingLearning = checkSimilarLearning("Props Serialization Error", [
      "nextjs",
      "serialization",
      "use-client",
    ]);

    if (!existingLearning) {
      // Registrar el aprendizaje actual
      logLearning({
        type: "error",
        title: "Props Serialization Error en Next.js",
        description:
          'Componentes hijos tenÃ­an "use client" innecesario cuando su componente padre ya lo tenÃ­a. Next.js requiere que props sean serializables en componentes client-side.',
        solution:
          'Eliminar "use client" de componentes hijos cuando el padre ya lo tiene. Verificar jerarquÃ­a de componentes antes de agregar "use client". Solo el componente de nivel superior necesita "use client" en la mayorÃ­a de casos.',
        files: [
          "src/components/builder/BuilderSidebar.tsx",
          "src/components/builder/BuilderProperties.tsx",
          "src/components/builder/InsertPanel.tsx",
        ],
        tags: ["nextjs", "serialization", "use-client", "props"],
        severity: "medium",
        timeToResolve: "15 minutes",
      });

      console.log("ðŸŽ¯ Learning registered successfully!");
    } else {
      console.log(
        "ðŸ“š Similar learning already exists:",
        existingLearning.title
      );
    }

    // Mostrar estadÃ­sticas actuales
    const stats = getStats();
    console.log("ðŸ“Š Learning Stats:", stats);
  }, [logLearning, getStats, checkSimilarLearning]);

  return (
    <div className="hidden">
      {/* Este componente es solo para demostrar el hook */}
      {/* En producciÃ³n, el hook se usarÃ­a directamente donde sea necesario */}
    </div>
  );
}
